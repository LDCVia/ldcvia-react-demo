var Person = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="person">
        <div className="personName">
          {this.props.first_name} {this.props.last_name}
        </div>
      </div>
    );
  }
});

var PersonBox = React.createClass({
  loadPeopleFromServer: function() {
    $.ajax({
      url: this.props.host + "/collections/" + this.props.database + "/Person",
      dataType: 'json',
      cache: false,
      headers: { 'apikey': this.props.apikey },
      success: function(data) {
        this.setState({data: data.data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handlePersonSubmit: function(person) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    person.__unid = Date.now();
    this.setState({data: person});
    $.ajax({
      url: this.props.host + "/document/" + this.props.database + "/Person/" + person.__unid,
      dataType: 'json',
      type: 'PUT',
      data: person,
      headers: { 'apikey': this.props.apikey },
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: person});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadPeopleFromServer();
    setInterval(this.loadPeopleFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="personBox">
        <h1>People</h1>
        <PeopleList data={this.state.data} />
        <PersonForm onPersonSubmit={this.handlePersonSubmit} />
      </div>
    );
  }
});

var PeopleList = React.createClass({
  render: function() {
    var peopleNodes = this.props.data.map(function(person) {
      return (
        <Person first_name={person.first_name} last_name={person.last_name} key={person.__unid}>
          {person.first_name} {person.last_name}
        </Person>
      );
    });
    return (
      <div className="peopleList">
        {peopleNodes}
      </div>
    );
  }
});

var PersonForm = React.createClass({
  getInitialState: function() {
    return {first_name: '', last_name: ''};
  },
  handleFirstNameChange: function(e) {
    this.setState({first_name: e.target.value});
  },
  handleLastNameChange: function(e) {
    this.setState({last_name: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var first_name = this.state.first_name.trim();
    var last_name = this.state.last_name.trim();
    if (!first_name || !last_name) {
      return;
    }
    this.props.onPersonSubmit({first_name: first_name, last_name: last_name});
    this.setState({first_name: '', last_name: ''});
  },
  render: function() {
    return (
      <form className="personForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="First name"
          value={this.state.first_name}
          onChange={this.handleFirstNameChange}
        />
        <input
          type="text"
          placeholder="Last Name"
          value={this.state.last_name}
          onChange={this.handleLastNameChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

ReactDOM.render(
  <PersonBox host="https://eu.ldcvia.com/1.0" database="dev-londc-com-demos-200kpeople-nsf1444113120236" apikey="63fcb59873426b46fd50ce4d1593f756" pollInterval={2000} />,
  document.getElementById('content')
);
